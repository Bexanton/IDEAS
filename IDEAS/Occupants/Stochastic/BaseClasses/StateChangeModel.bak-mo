within IDEAS.Occupants.Stochastic.BaseClasses;
model StateChangeModel

  Modelica.Blocks.Interfaces.RealOutput minLeft
    annotation (Placement(transformation(extent={{90,10},{110,30}})));
  Modelica.Blocks.Interfaces.IntegerOutput state
    annotation (Placement(transformation(extent={{90,-30},{110,-10}})));
  Modelica.Blocks.Interfaces.BooleanInput action annotation (Placement(
        transformation(
        extent={{-10,-10},{10,10}},
        rotation=-90,
        origin={0,-90})));

  Modelica.Blocks.Interfaces.RealInput minLeftBefore
    annotation (Placement(transformation(extent={{-110,70},{-90,90}})));
  Modelica.Blocks.Interfaces.RealInput r1
    annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
  Modelica.Blocks.Interfaces.RealInput r2
    annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
  Modelica.Blocks.Interfaces.RealInput lengthCycle
    annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
  Modelica.Blocks.Interfaces.RealInput[3] seed
    annotation (Placement(transformation(extent={{-110,-90},{-90,-70}})));
  Modelica.Blocks.Interfaces.IntegerInput stateBefore annotation (Placement(
        transformation(
        extent={{-10,-10},{10,10}},
        rotation=-90,
        origin={-20,100})));
  Modelica.Blocks.Interfaces.IntegerInput occ annotation (Placement(
        transformation(
        extent={{-10,-10},{10,10}},
        rotation=-90,
        origin={20,100})));

algorithm
if occ < 0.1 then
  state := 0;
  minLeft := 0;
elseif stateBefore > 0 and minLeftBefore >= 1 then
  state := stateBefore;
  minLeft := minLeftBefore-1;
elseif stateBefore > 0 and minLeftBefore < 1 then
  state := 0;
  minLeft := 0;
elseif stateBefore < 1 and action then
  if lengthCycle > 72 and lengthCycle < 74 then
    state := 1;
    minLeft := 70*(0-Modelica.Math.log(1-r2))^1.1 "exception for TV";
  else
    state := 1;
      minLeft := IDEAS.Occupants.Stochastic.BaseClasses.NormalVariate(
        mu=lengthCycle,
        sigma=lengthCycle/10,
        si=seed);
  end if;
else
  state := 0;
  minLeft := 0;
  end if;

  annotation (Diagram(graphics), Icon(graphics={Polygon(
          points={{-34,70},{-72,10},{-2,-10},{-10,14},{-6,20},{0,24},{10,28},{20,
              28},{28,28},{38,26},{44,22},{38,32},{28,40},{16,46},{2,48},{-12,50},
              {-18,48},{-24,46},{-34,70}},
          lineColor={127,0,0},
          smooth=Smooth.None,
          fillColor={175,175,175},
          fillPattern=FillPattern.Solid,
          lineThickness=0.5), Polygon(
          points={{14,-16},{4,10},{74,-10},{36,-70},{26,-48},{16,-50},{8,-50},{-2,
              -48},{-12,-48},{-20,-44},{-26,-40},{-34,-36},{-38,-30},{-40,-24},{
              -40,-22},{-34,-26},{-24,-30},{-16,-32},{-4,-30},{10,-20},{14,-16}},
          lineColor={127,0,0},
          lineThickness=0.5,
          smooth=Smooth.None,
          fillColor={175,175,175},
          fillPattern=FillPattern.Solid)}));

end StateChangeModel;
